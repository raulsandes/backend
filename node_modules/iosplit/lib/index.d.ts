/// <reference types="node" />
import EventEmitter from "events";
import readline from "readline";
import fs from "fs";
import blessed from "blessed";
interface IOSplitConfig {
    noConsole?: boolean;
    force?: boolean;
    history?: boolean | string;
    ignoreUncaughtException?: boolean;
    ignoreCtrlC?: boolean;
    style?: {
        log?: blessed.Widgets.Types.TStyle;
        line?: blessed.Widgets.Types.TStyle;
        input?: blessed.Widgets.Types.TStyle;
    };
}
declare const _default: {
    new (config?: IOSplitConfig): {
        enabled: boolean;
        gui?: boolean | undefined;
        rl?: readline.Interface | undefined;
        historyFile?: fs.promises.FileHandle | undefined;
        screen?: blessed.Widgets.Screen | undefined;
        body?: blessed.Widgets.Log | undefined;
        originalConsole?: Pick<Console, "error" | "log" | "warn"> | undefined;
        history: string[];
        historyPos: number;
        readonly config: IOSplitConfig;
        start(): void;
        stop(): void;
        refresh: () => void;
        log: (message?: any, ...rest: any[]) => void;
        warn: (message?: any, ...rest: any[]) => void;
        error: (message?: any, ...rest: any[]) => void;
        loadHistory(): Promise<void>;
        addListener(event: string | symbol, listener: (...args: any[]) => void): any;
        on(event: string | symbol, listener: (...args: any[]) => void): any;
        once(event: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(event: string | symbol, listener: (...args: any[]) => void): any;
        off(event: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(event: string | symbol): Function[];
        rawListeners(event: string | symbol): Function[];
        emit(event: string | symbol, ...args: any[]): boolean;
        listenerCount(type: string | symbol): number;
        prependListener(event: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    once(emitter: EventEmitter.EventEmitter, event: string | symbol): Promise<any[]>;
    EventEmitter: typeof EventEmitter.EventEmitter;
};
export = _default;
//# sourceMappingURL=index.d.ts.map