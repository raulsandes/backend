"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var events_1 = __importDefault(require("events"));
var readline_1 = __importDefault(require("readline"));
var util_1 = __importDefault(require("util"));
var fs_1 = __importDefault(require("fs"));
var blessed_1 = __importDefault(require("blessed"));
var chalk_1 = __importDefault(require("chalk"));
module.exports = /** @class */ (function (_super) {
    __extends(IOSplit, _super);
    function IOSplit(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this) || this;
        _this.config = config;
        _this.enabled = false;
        _this.history = [];
        _this.historyPos = 0;
        _this.refresh = function () {
            if (_this.screen)
                _this.screen.render();
        };
        _this.log = function (message) {
            if (message === void 0) { message = ""; }
            var rest = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                rest[_i - 1] = arguments[_i];
            }
            if (!_this.enabled)
                return;
            var data = util_1.default.format.apply(util_1.default, [message].concat(rest));
            if (_this.gui)
                _this.body.add(data);
            else
                process.stdout.write(data + "\n");
            _this.emit("log", data);
        };
        _this.warn = function (message) {
            if (message === void 0) { message = ""; }
            var rest = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                rest[_i - 1] = arguments[_i];
            }
            if (!_this.enabled)
                return;
            var data = util_1.default.format.apply(util_1.default, [message].concat(rest));
            if (_this.gui)
                _this.body.add(chalk_1.default.yellow(data));
            else
                process.stderr.write(data + "\n");
            _this.emit("log", data);
        };
        _this.error = function (message) {
            if (message === void 0) { message = ""; }
            var rest = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                rest[_i - 1] = arguments[_i];
            }
            if (!_this.enabled)
                return;
            var data = util_1.default.format.apply(util_1.default, [message].concat(rest));
            if (_this.gui)
                _this.body.add(chalk_1.default.red(data));
            else
                process.stderr.write(data + "\n");
            _this.emit("log", data);
        };
        return _this;
    }
    IOSplit.prototype.start = function () {
        var _this = this;
        if (this.enabled)
            return;
        this.enabled = true;
        // Handle console
        if (!this.config.noConsole) {
            this.originalConsole = {
                log: console.log,
                warn: console.warn,
                error: console.error,
            };
            console.log = this.log;
            console.warn = this.warn;
            console.error = this.error;
        }
        // Readline fallback
        if ((!process.stdout.isTTY && this.config.force === undefined) || this.config.force === false) {
            this.gui = false;
            this.rl = readline_1.default.createInterface({
                input: process.stdin,
                output: process.stdout,
            });
            this.rl.on("line", function (line) { return _this.emit("line", line); });
            this.rl.on("close", function () { return _this.emit("end"); });
            return;
        }
        this.gui = true;
        this.history = [];
        this.loadHistory().catch(this.error);
        var screen = this.screen = blessed_1.default.screen();
        var body = this.body = blessed_1.default.log({
            parent: screen,
            top: 0,
            left: 0,
            height: '100%-2',
            width: '100%',
            mouse: true,
            scrollbar: {
                style: {
                    ch: ' ',
                    bg: 'lightcyan',
                }
            },
            scrollable: true,
            scrollOnInput: false,
            alwaysScroll: false,
            style: this.config.style ? this.config.style.log : undefined,
        });
        var line = blessed_1.default.line({
            parent: screen,
            bottom: 1,
            left: 0,
            height: 1,
            width: '100%',
            orientation: "horizontal",
            style: this.config.style ? this.config.style.line : undefined,
        });
        var inputBar = blessed_1.default.textbox({
            parent: screen,
            bottom: 0,
            left: 0,
            height: 1,
            width: '100%',
            inputOnFocus: true,
            style: this.config.style ? this.config.style.input : undefined,
        });
        inputBar.on("detach", function () { return _this.emit("end"); });
        // Key inputs
        if (!this.config.ignoreCtrlC) {
            screen.key('C-c', function () { return process.kill(process.pid, "SIGINT"); });
            inputBar.key('C-c', function () { return process.kill(process.pid, "SIGINT"); });
        }
        inputBar.key('C-u', function () {
            inputBar.clearValue();
            screen.render();
        });
        inputBar.key('C-d', function () {
            inputBar.destroy();
            line.destroy();
            body.height = "100%";
            screen.render();
        });
        inputBar.key('up', function () {
            if (_this.historyPos <= 0)
                return;
            _this.historyPos--;
            inputBar.setValue(_this.history[_this.historyPos]);
            screen.render();
        });
        inputBar.key('down', function () {
            if (_this.historyPos >= _this.history.length - 1)
                return;
            _this.historyPos++;
            inputBar.setValue(_this.history[_this.historyPos]);
            screen.render();
        });
        // Handle submitting data
        inputBar.on('submit', function (text) {
            _this.emit("line", text);
            inputBar.clearValue();
            inputBar.focus();
            screen.render();
            _this.history.push(text);
            _this.historyPos = _this.history.length;
            if (_this.historyFile)
                _this.historyFile.appendFile(text + "\n").catch(_this.error);
        });
        // Handle errors
        if (!this.config.ignoreUncaughtException) {
            process.on('uncaughtException', function (err) {
                screen.destroy();
                throw err;
            });
        }
        inputBar.focus();
        screen.render();
        this.emit("start");
    };
    IOSplit.prototype.stop = function () {
        if (!this.enabled)
            return;
        this.enabled = false;
        // Cleanup
        if (this.historyFile) {
            this.historyFile.close().catch(console.error);
            delete this.historyFile;
        }
        if (this.rl) {
            this.rl.close();
            delete this.rl;
        }
        if (this.screen) {
            this.screen.children.forEach(function (child) { return child.destroy(); });
            this.screen.destroy();
            delete this.body;
            delete this.screen;
        }
        if (this.originalConsole) {
            console.log = this.originalConsole.log;
            console.warn = this.originalConsole.warn;
            console.error = this.originalConsole.error;
            delete this.originalConsole;
        }
        this.emit("stop");
    };
    IOSplit.prototype.loadHistory = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, fileName, _b, content, lines;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!this.config.history)
                            return [2 /*return*/];
                        fileName = this.config.history === true ? ".history" : this.config.history;
                        _b = this;
                        return [4 /*yield*/, fs_1.default.promises.open(fileName, "a+")];
                    case 1:
                        _b.historyFile = _c.sent();
                        return [4 /*yield*/, this.historyFile.readFile("utf8")];
                    case 2:
                        content = _c.sent();
                        lines = content.split("\n").filter(function (line) { return line !== ""; });
                        (_a = this.history).unshift.apply(_a, lines);
                        this.historyPos += lines.length;
                        return [2 /*return*/];
                }
            });
        });
    };
    return IOSplit;
}(events_1.default));
//# sourceMappingURL=index.js.map